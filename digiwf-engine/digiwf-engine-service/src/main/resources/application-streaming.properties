spring.cloud.stream.default-binder=kafka
# kafka target topics
# engine topics
digiwf.streaming.topics.engine.LOCAL=dwf-digiwf-engine-local-01
digiwf.streaming.topics.engine.DEV=dwf-digiwf-engine-dev
digiwf.streaming.topics.engine.TEST=dwf-digiwf-engine-test
digiwf.streaming.topics.engine.DEMO=dwf-digiwf-engine-demo
# cocreation topics
digiwf.streaming.topics.cocreation.LOCAL=dwf-cocreation-local-01
digiwf.streaming.topics.cocreation.DEV=dwf-cocreation-dev
digiwf.streaming.topics.cocreation.TEST=dwf-cocreation-test
digiwf.streaming.topics.cocreation.DEMO=dwf-cocreation-demo
# cocreation-deploy topics
digiwf.streaming.topics.cocreation-deploy.LOCAL=dwf-cocreation-deploy-local-01
digiwf.streaming.topics.cocreation-deploy.DEV=dwf-cocreation-deploy-dev
digiwf.streaming.topics.cocreation-deploy.TEST=dwf-cocreation-deploy-test
digiwf.streaming.topics.cocreation-deploy.DEMO=dwf-cocreation-deploy-demo
#Spring Cloud Functions
spring.cloud.stream.function.routing.enabled=true
spring.cloud.function.definition=dynamicProducer;functionRouter;deploymentStatus;
spring.cloud.stream.bindings.functionRouter-in-0.destination=${digiwf.streaming.engine.topics}
spring.cloud.stream.bindings.functionRouter-in-0.group=${digiwf.streaming.group}
spring.cloud.stream.bindings.dynamicProducer-out-0.destination=dwf-digiwf-engine-local-01
spring.cloud.stream.bindings.dynamicProducer-out-0.producer.auto-startup=true
spring.cloud.stream.bindings.deploymentStatus-out-0.destination=${digiwf.streaming.cocreation.deploy.topic}
spring.cloud.stream.bindings.deploymentStatus-out-0.producer.auto-startup=true
# Cloud function consumers
# type mappings
digiwf.streaming.typeMappings.correlatemessagev01=correlateMessageV01
digiwf.streaming.typeMappings.startProcessV01=startProcessV01
digiwf.streaming.typeMappings.deploy=deploy
digiwf.streaming.typeMappings.deploySchema=deploySchema
digiwf.streaming.typeMappings.deployConfiguration=deployConfiguration
#Kafka Config
spring.cloud.stream.kafka.binder.consumerProperties.key.deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.cloud.stream.kafka.binder.consumerProperties.value.deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.cloud.stream.kafka.binder.producerProperties.key.serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.cloud.stream.kafka.binder.producerProperties.value.serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*
#DLQ Config -> only possible if group for functionRouter is set
spring.cloud.stream.default.consumer.maxAttempts=1
spring.cloud.stream.kafka.default.consumer.dlqName=${digiwf.streaming.dlqtopic}
spring.cloud.stream.kafka.default.consumer.enableDlq=true

# asyncapi docs
io.muenchendigital.digiwf.docs.enabled=true
io.muenchendigital.digiwf.docs.basePackage=de.muenchen.digitalwf
io.muenchendigital.digiwf.docs.version=1.0.0
io.muenchendigital.digiwf.docs.title=digiwf-engine
