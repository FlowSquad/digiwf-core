server:
  port: 8080
spring:
  cloud:
    stream:
      bindings:
        receiveMessages-in-0:
          group: "digiwf-integration-example"
          destination: "digiwf-example-integration"
        sendMessage-out-0:
          destination: "digiwf-example-integration"
      kafka:
        binder:
          brokers: "${KAFKA_BOOTSTRAP_SERVER:localhost}:${KAFKA_BOOTSTRAP_SERVER_PORT:29092}"
          producerProperties:
            value:
              serializer: org.springframework.kafka.support.serializer.JsonSerializer
            key:
              serializer: org.springframework.kafka.support.serializer.JsonSerializer
          consumerProperties:
            auto:
              offset:
                reset: latest
            value:
              deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
            key:
              deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
          configuration:
            security:
              protocol: "${KAFKA_SECURITY_PROTOCOL:PLAINTEXT}"
    function:
      definition: receiveMessages;sendMessage;
  kafka:
    consumer:
      properties:
        spring:
          json:
            trusted:
              packages: "*"
io:
  muenchendigital:
    digiwf:
      message:
        incidentDestination: "digiwf-example-integration-incident"
        technicalErrorDestination: "digiwf-example-integration-technical-error"
        correlateMessageDestination: "digiwf-example-integration-correlate-message"
